INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: 1799.95s
INFO     translator memory limit: 3500 MB
INFO     translator command line string: /usr/bin/python3 /src/fd/builds/release/bin/translate/translate.py ./visitall-domain.pddl ./instances-optimal/visitall-instance7.pddl --sas-file output.sas
Parsing...
Parsing: [0.000s CPU, 0.002s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.001s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.002s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 6 rules.
Computing model... [0.000s CPU, 0.003s wall-clock]
286 relevant atoms
105 auxiliary atoms
391 final queue length
503 total queue pushes
Completing instantiation... [0.010s CPU, 0.003s wall-clock]
Instantiating: [0.010s CPU, 0.010s wall-clock]
Computing fact groups...
Finding invariants...
4 initial candidates
Finding invariants: [0.000s CPU, 0.001s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
25 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.000s CPU, 0.000s wall-clock]
Computing fact groups: [0.000s CPU, 0.001s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.000s wall-clock]
Translating task: [0.000s CPU, 0.003s wall-clock]
0 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
0 operators removed
0 axioms removed
3 propositions removed
Detecting unreachable propositions: [0.000s CPU, 0.002s wall-clock]
Reordering and filtering variables...
25 of 25 variables necessary.
0 of 1 mutex groups necessary.
80 of 80 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.001s wall-clock]
Translator variables: 25
Translator derived variables: 0
Translator facts: 73
Translator goal facts: 24
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 80
Translator axioms: 0
Translator task size: 438
Translator peak memory: 39472 KB
Writing output... [0.000s CPU, 0.002s wall-clock]
Done! [0.020s CPU, 0.023s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: output.sas
INFO     search time limit: 1799.85s
INFO     search memory limit: 3500 MB
INFO     search command line string: /src/fd/builds/release/bin/downward --search 'astar(merge_and_shrink(merge_strategy=merge_sccs(order_of_sccs=topological,merge_selector=score_based_filtering(scoring_functions=[goal_relevance,dfp,total_order])),shrink_strategy=shrink_bisimulation(greedy=false)))' --internal-plan-file sas_plan < output.sas
[t=0s, 55860 KB] reading input...
[t=0s, 55860 KB] done reading input!
[t=0.00438299s, 56124 KB] Initializing merge-and-shrink heuristic...
[t=0.00438299s, 56124 KB] Running merge-and-shrink algorithm...
[t=0.00438299s, 56124 KB] Merge strategy options:
[t=0.00438299s, 56124 KB] Type: sccs
[t=0.00438299s, 56124 KB] Merge order of sccs: topological
[t=0.00438299s, 56124 KB] Merge strategy for merging within sccs: 
[t=0.00438299s, 56124 KB] Merge selector options:
[t=0.00438299s, 56124 KB] Name: score based filtering
[t=0.00438299s, 56124 KB] Merge scoring function:
[t=0.00438299s, 56124 KB] Name: goal relevance
[t=0.00438299s, 56124 KB] Merge scoring function:
[t=0.00438299s, 56124 KB] Name: dfp
[t=0.00438299s, 56124 KB] Merge scoring function:
[t=0.00438299s, 56124 KB] Name: total order
[t=0.00438299s, 56124 KB] Atomic transition system order: reverse level
[t=0.00438299s, 56124 KB] Product transition system order: new to old
[t=0.00438299s, 56124 KB] Consider product before atomic transition systems
[t=0.00438299s, 56124 KB] Random seed: -1

[t=0.00438299s, 56124 KB] Options related to size limits and shrinking: 
[t=0.00438299s, 56124 KB] Transition system size limit: 50000
[t=0.00438299s, 56124 KB] Transition system size limit right before merge: 50000
[t=0.00438299s, 56124 KB] Threshold to trigger shrinking right before merge: 50000

[t=0.00438299s, 56124 KB] Pruning unreachable states: yes
[t=0.00438299s, 56124 KB] Pruning irrelevant states: yes

[t=0.00438299s, 56124 KB] Label reduction disabled

[t=0.00438299s, 56124 KB] Main loop max time in seconds: inf

[t=0.00438299s, 56124 KB] ===============================================================================
[t=0.00438299s, 56124 KB] WARNING! You did not enable label reduction.
This may drastically reduce the performance of merge-and-shrink!
[t=0.00438299s, 56124 KB] ===============================================================================

[t=0.00568735s, 56124 KB] Building atomic transition systems... 
[t=0.00568735s, 56520 KB] M&S algorithm timer: 0.00130437s (after computation of atomic factors)

[t=0.00568735s, 56520 KB] Starting main loop without a time limit.
[t=0.00568735s, 56520 KB] building causal graph...done! [t=0s]
[t=0.00568735s, 56520 KB] SCCs of the causal graph:
[t=0.00568735s, 56520 KB] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]
[t=0.00568735s, 56520 KB] Only one single SCC
[t=0.00568735s, 56520 KB] Next pair of indices: (0, 1)
[t=0.00568735s, 56520 KB] M&S algorithm main loop timer: 0s (after computation of next merge)
[t=0.00669876s, 56520 KB] M&S algorithm main loop timer: 0.00101141s (after merging)
[t=0.00669876s, 56520 KB] M&S algorithm main loop timer: 0.00101141s (after pruning)

[t=0.00669876s, 56520 KB] Next pair of indices: (2, 25)
[t=0.00669876s, 56520 KB] M&S algorithm main loop timer: 0.00101141s (after computation of next merge)
[t=0.00669876s, 56520 KB] M&S algorithm main loop timer: 0.00101141s (after merging)
[t=0.00669876s, 56520 KB] M&S algorithm main loop timer: 0.00101141s (after pruning)

[t=0.00669876s, 56520 KB] Next pair of indices: (3, 26)
[t=0.00669876s, 56520 KB] M&S algorithm main loop timer: 0.00101141s (after computation of next merge)
[t=0.00669876s, 56520 KB] M&S algorithm main loop timer: 0.00101141s (after merging)
[t=0.00669876s, 56520 KB] M&S algorithm main loop timer: 0.00101141s (after pruning)

[t=0.00669876s, 56520 KB] Next pair of indices: (4, 27)
[t=0.00669876s, 56520 KB] M&S algorithm main loop timer: 0.00101141s (after computation of next merge)
[t=0.00669876s, 56520 KB] M&S algorithm main loop timer: 0.00101141s (after merging)
[t=0.00669876s, 56520 KB] M&S algorithm main loop timer: 0.00101141s (after pruning)

[t=0.00669876s, 56520 KB] Next pair of indices: (5, 28)
[t=0.00669876s, 56520 KB] M&S algorithm main loop timer: 0.00101141s (after computation of next merge)
[t=0.00669876s, 56520 KB] M&S algorithm main loop timer: 0.00101141s (after merging)
[t=0.00669876s, 56520 KB] M&S algorithm main loop timer: 0.00101141s (after pruning)

[t=0.00669876s, 56520 KB] Next pair of indices: (6, 29)
[t=0.00669876s, 56520 KB] M&S algorithm main loop timer: 0.00101141s (after computation of next merge)
[t=0.00669876s, 56520 KB] M&S algorithm main loop timer: 0.00101141s (after merging)
[t=0.00669876s, 56520 KB] M&S algorithm main loop timer: 0.00101141s (after pruning)

[t=0.00669876s, 56520 KB] Next pair of indices: (7, 30)
[t=0.00669876s, 56520 KB] M&S algorithm main loop timer: 0.00101141s (after computation of next merge)
[t=0.0106995s, 56652 KB] M&S algorithm main loop timer: 0.0050121s (after merging)
[t=0.0106995s, 56652 KB] M&S algorithm main loop timer: 0.0050121s (after pruning)

[t=0.0106995s, 56652 KB] Next pair of indices: (8, 31)
[t=0.0106995s, 56652 KB] M&S algorithm main loop timer: 0.0050121s (after computation of next merge)
[t=0.0106995s, 56784 KB] M&S algorithm main loop timer: 0.0050121s (after merging)
[t=0.0106995s, 56784 KB] M&S algorithm main loop timer: 0.0050121s (after pruning)

[t=0.0106995s, 56784 KB] Next pair of indices: (9, 32)
[t=0.0106995s, 56784 KB] M&S algorithm main loop timer: 0.0050121s (after computation of next merge)
[t=0.0146984s, 57232 KB] M&S algorithm main loop timer: 0.00901105s (after merging)
[t=0.0186985s, 57232 KB] M&S algorithm main loop timer: 0.0130112s (after pruning)

[t=0.0186985s, 57232 KB] Next pair of indices: (10, 33)
[t=0.0186985s, 57232 KB] M&S algorithm main loop timer: 0.0130112s (after computation of next merge)
[t=0.0226984s, 57832 KB] M&S algorithm main loop timer: 0.0170111s (after merging)
[t=0.0226984s, 57832 KB] M&S algorithm main loop timer: 0.0170111s (after pruning)

[t=0.0226984s, 57832 KB] Next pair of indices: (11, 34)
[t=0.0226984s, 57832 KB] M&S algorithm main loop timer: 0.0170111s (after computation of next merge)
[t=0.0306976s, 58684 KB] M&S algorithm main loop timer: 0.0250102s (after merging)
[t=0.0346978s, 58684 KB] M&S algorithm main loop timer: 0.0290105s (after pruning)

[t=0.0346978s, 58684 KB] Next pair of indices: (12, 35)
[t=0.0346978s, 58684 KB] M&S algorithm main loop timer: 0.0290105s (after computation of next merge)
[t=0.0466972s, 60284 KB] M&S algorithm main loop timer: 0.0410098s (after merging)
[t=0.0506977s, 60284 KB] M&S algorithm main loop timer: 0.0450104s (after pruning)

[t=0.0506977s, 60284 KB] Next pair of indices: (13, 36)
[t=0.0506977s, 60284 KB] M&S algorithm main loop timer: 0.0450104s (after computation of next merge)
[t=0.134696s, 61648 KB] M&S algorithm main loop timer: 0.129008s (after shrinking)
[t=0.154696s, 62232 KB] M&S algorithm main loop timer: 0.149009s (after merging)
[t=0.158696s, 62232 KB] M&S algorithm main loop timer: 0.153008s (after pruning)

[t=0.162696s, 62232 KB] Next pair of indices: (14, 37)
[t=0.162696s, 62232 KB] M&S algorithm main loop timer: 0.157008s (after computation of next merge)
[t=0.246687s, 64096 KB] M&S algorithm main loop timer: 0.240999s (after shrinking)
[t=0.266687s, 64096 KB] M&S algorithm main loop timer: 0.260999s (after merging)
[t=0.274687s, 64096 KB] M&S algorithm main loop timer: 0.269s (after pruning)

[t=0.274687s, 64096 KB] Next pair of indices: (15, 38)
[t=0.274687s, 64096 KB] M&S algorithm main loop timer: 0.269s (after computation of next merge)
[t=0.350675s, 64128 KB] M&S algorithm main loop timer: 0.344987s (after shrinking)
[t=0.374637s, 64128 KB] M&S algorithm main loop timer: 0.36895s (after merging)
[t=0.382636s, 64128 KB] M&S algorithm main loop timer: 0.376949s (after pruning)

[t=0.382636s, 64128 KB] Next pair of indices: (16, 39)
[t=0.382636s, 64128 KB] M&S algorithm main loop timer: 0.376949s (after computation of next merge)
[t=0.450635s, 66032 KB] M&S algorithm main loop timer: 0.444948s (after shrinking)
[t=0.474636s, 66032 KB] M&S algorithm main loop timer: 0.472947s (after merging)
[t=0.486635s, 66032 KB] M&S algorithm main loop timer: 0.480947s (after pruning)

[t=0.486635s, 66032 KB] Next pair of indices: (17, 40)
[t=0.486635s, 66032 KB] M&S algorithm main loop timer: 0.480947s (after computation of next merge)
[t=0.562635s, 66032 KB] M&S algorithm main loop timer: 0.556947s (after shrinking)
[t=0.586634s, 66032 KB] M&S algorithm main loop timer: 0.580946s (after merging)
[t=0.598632s, 66032 KB] M&S algorithm main loop timer: 0.592944s (after pruning)

[t=0.598632s, 66032 KB] Next pair of indices: (18, 41)
[t=0.598632s, 66032 KB] M&S algorithm main loop timer: 0.592944s (after computation of next merge)
[t=0.674635s, 66032 KB] M&S algorithm main loop timer: 0.668947s (after shrinking)
[t=0.710634s, 66032 KB] M&S algorithm main loop timer: 0.704946s (after merging)
[t=0.722636s, 66032 KB] M&S algorithm main loop timer: 0.716948s (after pruning)

[t=0.726631s, 66032 KB] Next pair of indices: (19, 42)
[t=0.726631s, 66032 KB] M&S algorithm main loop timer: 0.720944s (after computation of next merge)
[t=0.822624s, 67940 KB] M&S algorithm main loop timer: 0.816937s (after shrinking)
[t=0.866627s, 67940 KB] M&S algorithm main loop timer: 0.860939s (after merging)
[t=0.882622s, 67940 KB] M&S algorithm main loop timer: 0.876935s (after pruning)

[t=0.886621s, 67940 KB] Next pair of indices: (20, 43)
[t=0.886621s, 67940 KB] M&S algorithm main loop timer: 0.880933s (after computation of next merge)
[t=0.998617s, 70316 KB] M&S algorithm main loop timer: 0.992929s (after shrinking)
[t=1.04662s, 70316 KB] M&S algorithm main loop timer: 1.04093s (after merging)
[t=1.07061s, 70316 KB] M&S algorithm main loop timer: 1.06493s (after pruning)

[t=1.07061s, 70316 KB] Next pair of indices: (21, 44)
[t=1.07061s, 70316 KB] M&S algorithm main loop timer: 1.06493s (after computation of next merge)
[t=1.2066s, 73220 KB] M&S algorithm main loop timer: 1.20091s (after shrinking)
[t=1.27394s, 74220 KB] M&S algorithm main loop timer: 1.26825s (after merging)
[t=1.30594s, 74220 KB] M&S algorithm main loop timer: 1.30026s (after pruning)

[t=1.30594s, 74220 KB] Next pair of indices: (22, 45)
[t=1.30594s, 74220 KB] M&S algorithm main loop timer: 1.30026s (after computation of next merge)
[t=1.48193s, 79632 KB] M&S algorithm main loop timer: 1.47624s (after shrinking)
[t=1.56992s, 79632 KB] M&S algorithm main loop timer: 1.56423s (after merging)
[t=1.6099s, 79632 KB] M&S algorithm main loop timer: 1.60422s (after pruning)

[t=1.6099s, 79632 KB] Next pair of indices: (23, 46)
[t=1.6099s, 79632 KB] M&S algorithm main loop timer: 1.60422s (after computation of next merge)
[t=1.7739s, 85776 KB] M&S algorithm main loop timer: 1.76821s (after shrinking)
[t=1.86589s, 85776 KB] M&S algorithm main loop timer: 1.8602s (after merging)
[t=1.9099s, 85776 KB] M&S algorithm main loop timer: 1.90421s (after pruning)

[t=1.9099s, 85776 KB] Next pair of indices: (24, 47)
[t=1.9099s, 85776 KB] M&S algorithm main loop timer: 1.90421s (after computation of next merge)
[t=2.07389s, 88064 KB] M&S algorithm main loop timer: 2.0682s (after shrinking)
[t=2.17388s, 88064 KB] M&S algorithm main loop timer: 2.16819s (after merging)
[t=2.21787s, 88064 KB] M&S algorithm main loop timer: 2.21219s (after pruning)

[t=2.21787s, 88064 KB] End of merge-and-shrink algorithm, statistics:
[t=2.21787s, 88064 KB] Main loop runtime: 2.21219s
[t=2.21787s, 88064 KB] Maximum intermediate abstraction size: 49986
[t=2.21787s, 88064 KB] Final peak memory increase of merge-and-shrink algorithm: 31940 KB
[t=2.21787s, 88064 KB] Merge-and-shrink algorithm runtime: 2.21349s

[t=2.21787s, 88064 KB] Number of remaining factors: 1
[t=2.21787s, 88064 KB] Number of factors kept: 1
[t=2.21787s, 88064 KB] Done initializing merge-and-shrink heuristic.

[t=2.21787s, 88064 KB] Building successor generator...done!
[t=2.21787s, 88064 KB] peak memory difference for successor generator creation: 0 KB
[t=2.21787s, 88064 KB] time for successor generation creation: 0s
[t=2.21787s, 88064 KB] Variables: 25
[t=2.21787s, 88064 KB] FactPairs: 73
[t=2.21787s, 88064 KB] Bytes per state: 4
[t=2.21787s, 88064 KB] Conducting best first search with reopening closed nodes, (real) bound = 2147483647
[t=2.21787s, 88064 KB] New best heuristic value for merge_and_shrink(merge_strategy = merge_sccs(order_of_sccs = topological, merge_selector = score_based_filtering(scoring_functions = list(goal_relevance, dfp, total_order))), shrink_strategy = shrink_bisimulation(greedy = false)): 15
[t=2.21787s, 88064 KB] g=0, 1 evaluated, 0 expanded
[t=2.21787s, 88064 KB] f = 15, 1 evaluated, 0 expanded
[t=2.21787s, 88064 KB] Initial heuristic value for merge_and_shrink(merge_strategy = merge_sccs(order_of_sccs = topological, merge_selector = score_based_filtering(scoring_functions = list(goal_relevance, dfp, total_order))), shrink_strategy = shrink_bisimulation(greedy = false)): 15
[t=2.21787s, 88064 KB] pruning method: none
[t=2.21787s, 88064 KB] New best heuristic value for merge_and_shrink(merge_strategy = merge_sccs(order_of_sccs = topological, merge_selector = score_based_filtering(scoring_functions = list(goal_relevance, dfp, total_order))), shrink_strategy = shrink_bisimulation(greedy = false)): 14
[t=2.21787s, 88064 KB] g=1, 3 evaluated, 1 expanded
[t=2.21787s, 88064 KB] New best heuristic value for merge_and_shrink(merge_strategy = merge_sccs(order_of_sccs = topological, merge_selector = score_based_filtering(scoring_functions = list(goal_relevance, dfp, total_order))), shrink_strategy = shrink_bisimulation(greedy = false)): 13
[t=2.21787s, 88064 KB] g=2, 7 evaluated, 2 expanded
[t=2.21787s, 88064 KB] New best heuristic value for merge_and_shrink(merge_strategy = merge_sccs(order_of_sccs = topological, merge_selector = score_based_filtering(scoring_functions = list(goal_relevance, dfp, total_order))), shrink_strategy = shrink_bisimulation(greedy = false)): 12
[t=2.21787s, 88064 KB] g=3, 12 evaluated, 3 expanded
[t=2.21787s, 88064 KB] New best heuristic value for merge_and_shrink(merge_strategy = merge_sccs(order_of_sccs = topological, merge_selector = score_based_filtering(scoring_functions = list(goal_relevance, dfp, total_order))), shrink_strategy = shrink_bisimulation(greedy = false)): 11
[t=2.21787s, 88064 KB] g=4, 26 evaluated, 7 expanded
[t=2.21787s, 88064 KB] New best heuristic value for merge_and_shrink(merge_strategy = merge_sccs(order_of_sccs = topological, merge_selector = score_based_filtering(scoring_functions = list(goal_relevance, dfp, total_order))), shrink_strategy = shrink_bisimulation(greedy = false)): 10
[t=2.21787s, 88064 KB] g=5, 29 evaluated, 8 expanded
[t=2.21787s, 88064 KB] New best heuristic value for merge_and_shrink(merge_strategy = merge_sccs(order_of_sccs = topological, merge_selector = score_based_filtering(scoring_functions = list(goal_relevance, dfp, total_order))), shrink_strategy = shrink_bisimulation(greedy = false)): 9
[t=2.21787s, 88064 KB] g=6, 76 evaluated, 21 expanded
[t=2.21787s, 88064 KB] f = 16, 95 evaluated, 28 expanded
[t=2.21787s, 88064 KB] f = 17, 163 evaluated, 51 expanded
[t=2.21787s, 88064 KB] New best heuristic value for merge_and_shrink(merge_strategy = merge_sccs(order_of_sccs = topological, merge_selector = score_based_filtering(scoring_functions = list(goal_relevance, dfp, total_order))), shrink_strategy = shrink_bisimulation(greedy = false)): 8
[t=2.21787s, 88064 KB] g=9, 406 evaluated, 149 expanded
[t=2.22187s, 88064 KB] f = 18, 1390 evaluated, 512 expanded
[t=2.22187s, 88064 KB] New best heuristic value for merge_and_shrink(merge_strategy = merge_sccs(order_of_sccs = topological, merge_selector = score_based_filtering(scoring_functions = list(goal_relevance, dfp, total_order))), shrink_strategy = shrink_bisimulation(greedy = false)): 7
[t=2.22187s, 88064 KB] g=11, 1405 evaluated, 517 expanded
[t=2.22187s, 88064 KB] New best heuristic value for merge_and_shrink(merge_strategy = merge_sccs(order_of_sccs = topological, merge_selector = score_based_filtering(scoring_functions = list(goal_relevance, dfp, total_order))), shrink_strategy = shrink_bisimulation(greedy = false)): 6
[t=2.22187s, 88064 KB] g=12, 1408 evaluated, 518 expanded
[t=2.22587s, 88064 KB] f = 19, 2829 evaluated, 1065 expanded
[t=2.24187s, 88064 KB] f = 20, 11572 evaluated, 4767 expanded
[t=2.26987s, 88064 KB] f = 21, 25444 evaluated, 10597 expanded
[t=2.26987s, 88064 KB] New best heuristic value for merge_and_shrink(merge_strategy = merge_sccs(order_of_sccs = topological, merge_selector = score_based_filtering(scoring_functions = list(goal_relevance, dfp, total_order))), shrink_strategy = shrink_bisimulation(greedy = false)): 5
[t=2.26987s, 88064 KB] g=16, 25445 evaluated, 10598 expanded
[t=2.36987s, 88064 KB] f = 22, 72771 evaluated, 32283 expanded
[t=2.36987s, 88064 KB] New best heuristic value for merge_and_shrink(merge_strategy = merge_sccs(order_of_sccs = topological, merge_selector = score_based_filtering(scoring_functions = list(goal_relevance, dfp, total_order))), shrink_strategy = shrink_bisimulation(greedy = false)): 4
[t=2.36987s, 88064 KB] g=18, 72950 evaluated, 32361 expanded
[t=2.55386s, 88064 KB] f = 23, 162965 evaluated, 74050 expanded
[t=2.55386s, 88064 KB] New best heuristic value for merge_and_shrink(merge_strategy = merge_sccs(order_of_sccs = topological, merge_selector = score_based_filtering(scoring_functions = list(goal_relevance, dfp, total_order))), shrink_strategy = shrink_bisimulation(greedy = false)): 3
[t=2.55386s, 88064 KB] g=20, 162981 evaluated, 74056 expanded
[t=2.99383s, 88064 KB] f = 24, 368404 evaluated, 176921 expanded
[t=2.99383s, 88064 KB] New best heuristic value for merge_and_shrink(merge_strategy = merge_sccs(order_of_sccs = topological, merge_selector = score_based_filtering(scoring_functions = list(goal_relevance, dfp, total_order))), shrink_strategy = shrink_bisimulation(greedy = false)): 2
[t=2.99383s, 88064 KB] g=22, 368405 evaluated, 176922 expanded
[t=2.99383s, 88064 KB] New best heuristic value for merge_and_shrink(merge_strategy = merge_sccs(order_of_sccs = topological, merge_selector = score_based_filtering(scoring_functions = list(goal_relevance, dfp, total_order))), shrink_strategy = shrink_bisimulation(greedy = false)): 1
[t=2.99383s, 88064 KB] g=23, 368408 evaluated, 176923 expanded
[t=2.99383s, 88064 KB] New best heuristic value for merge_and_shrink(merge_strategy = merge_sccs(order_of_sccs = topological, merge_selector = score_based_filtering(scoring_functions = list(goal_relevance, dfp, total_order))), shrink_strategy = shrink_bisimulation(greedy = false)): 0
[t=2.99383s, 88064 KB] g=24, 368412 evaluated, 176924 expanded
[t=2.99383s, 88064 KB] Solution found!
[t=2.99383s, 88064 KB] Actual search time: 0.77596s
move loc-x2-y2 loc-x3-y2 (1)
move loc-x3-y2 loc-x3-y3 (1)
move loc-x3-y3 loc-x2-y3 (1)
move loc-x2-y3 loc-x1-y3 (1)
move loc-x1-y3 loc-x1-y2 (1)
move loc-x1-y2 loc-x0-y2 (1)
move loc-x0-y2 loc-x0-y3 (1)
move loc-x0-y3 loc-x0-y4 (1)
move loc-x0-y4 loc-x1-y4 (1)
move loc-x1-y4 loc-x2-y4 (1)
move loc-x2-y4 loc-x3-y4 (1)
move loc-x3-y4 loc-x4-y4 (1)
move loc-x4-y4 loc-x4-y3 (1)
move loc-x4-y3 loc-x4-y2 (1)
move loc-x4-y2 loc-x4-y1 (1)
move loc-x4-y1 loc-x4-y0 (1)
move loc-x4-y0 loc-x3-y0 (1)
move loc-x3-y0 loc-x3-y1 (1)
move loc-x3-y1 loc-x2-y1 (1)
move loc-x2-y1 loc-x2-y0 (1)
move loc-x2-y0 loc-x1-y0 (1)
move loc-x1-y0 loc-x0-y0 (1)
move loc-x0-y0 loc-x0-y1 (1)
move loc-x0-y1 loc-x1-y1 (1)
[t=2.99383s, 88064 KB] Plan length: 24 step(s).
[t=2.99383s, 88064 KB] Plan cost: 24
[t=2.99383s, 88064 KB] Expanded 176925 state(s).
[t=2.99383s, 88064 KB] Reopened 0 state(s).
[t=2.99383s, 88064 KB] Evaluated 368412 state(s).
[t=2.99383s, 88064 KB] Evaluations: 368412
[t=2.99383s, 88064 KB] Generated 582761 state(s).
[t=2.99383s, 88064 KB] Dead ends: 0 state(s).
[t=2.99383s, 88064 KB] Expanded until last jump: 176921 state(s).
[t=2.99383s, 88064 KB] Reopened until last jump: 0 state(s).
[t=2.99383s, 88064 KB] Evaluated until last jump: 368404 state(s).
[t=2.99383s, 88064 KB] Generated until last jump: 582753 state(s).
[t=2.99383s, 88064 KB] Number of registered states: 368412
[t=2.99383s, 88064 KB] Int hash set load factor: 368412/524288 = 0.70269
[t=2.99383s, 88064 KB] Int hash set resizes: 19
[t=2.99383s, 88064 KB] Search time: 0.77596s
[t=2.99383s, 88064 KB] Total time: 2.99383s
Solution found.
Peak memory: 88064 KB
Remove intermediate file output.sas
search exit code: 0

